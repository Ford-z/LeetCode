#给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。

#给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。

#完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。

#来源：力扣（LeetCode）
#链接：https://leetcode-cn.com/problems/perfect-squares
#著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
class Solution:
    def numSquares(self, n: int) -> int:
        #任何一个正整数都可以表示成不超过四个整数的平方之和。 推论：满足四数平方和定理的数n（四个整数的情况），必定满足 n=4^a(8b+7)
        #任何正整数都可以拆分成不超过4个数的平方和 ---> 答案只可能是1,2,3,4
        #如果一个数最少可以拆成4个数的平方和，则这个数还满足 n = (4^a)*(8b+7) ---> 因此可以先看这个数是否满足上述公式，如果不满足，答案就是1,2,3了
        #如果这个数本来就是某个数的平方，那么答案就是1，否则答案就只剩2,3了
        #如果答案是2，即n=a^2+b^2，那么我们可以枚举a，来验证，如果验证通过则答案是2
        #只能是3
        while n%4==0:
            n/=4
        if n%8==7:
            return 4
        for i in range(0,int(n//2)+2):
            if (n-i*i==0):
                return 1
        i,j=0,0
        while (i*i<n):
            while (j*j<n):
                if (n-i*i-j*j==0):
                    return 2
                j+=1
            i+=1
            j=0
        return 3
